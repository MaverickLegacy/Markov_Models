import numpy as np,sys
obs_sequence = '1634163435146254263155264425162341316315564163626514256346263562653614526352615341626352'

def get_transition_prob(num_states=8,fair=False):
   if(fair == False ): 
    trans_mat = np.zeros((num_states,num_states),np.float64)
    trans_mat[0,3] = 0.75
    trans_mat[0,7] = 0.25
    trans_mat[1,0] = 1
    trans_mat[2,1] = 1
    trans_mat[3,2] = 1
    trans_mat[4,3] = 0.25
    trans_mat[4,7] = 0.75
    trans_mat[5,4] = 1
    trans_mat[6,5] = 1
    trans_mat[7,6] = 1
    return trans_mat
   else: 
    return np.array([[1.0]])   
def get_obs_prob(num_obs=6,num_states=8,fair = False):
   if(fair == False): 
    obs_prob = np.ones((num_obs,num_states),np.float64) * (1/6.0)
    obs_prob[0,4:] = 1/20.0
    obs_prob[1:5,4:] = 1/8.0
    obs_prob[5,4:] = 9/20.0
   else:
    obs_prob = np.array([[1/6.0],[1/6.0],[1/6.0],[1/6.0],[1/6.0],[1/6.0]])
   return obs_prob    
def get_prior_prob(num_states=8, fair = False):
   if(fair == False):
    priors = np.zeros((num_states,1),np.float64)
    priors[0,0] = 0.5
    priors[4,0] = 0.5
   else:
    priors = np.array([[1.0]])    
   return priors
def forward_algorithm(observations,obs_prob,transition_prob,prior_prob,num_states=8):
    num_obs = len(observations)
    alphas = np.zeros((num_states,num_obs),np.float64)
    alphas[:,0:1] = obs_prob[int(observations[0]) - 1:int(observations[0]),:].transpose() * prior_prob  
    for i in range(1,num_obs):
        obs_index = int(observations[i]) - 1
        alphas[:,i:i+1] = obs_prob[obs_index:obs_index+1,:].transpose() * np.dot(transition_prob,alphas[:,i-1:i] )
    display_alphas(alphas,num_obs,num_states)    
    return  np.sum(alphas[:,num_obs-1])

def display_alphas(alphas,num_obs,num_states):
    for i in range(0,int(num_obs)):
        for j in range(0,int(num_states)):
            print('alpha_s%dt%d : %e' % (j,i,alphas[j,i]))
            
if __name__ == '__main__':
    print('Casino with Regular die:')
    priors = get_prior_prob(1,True)
    obs_prob = get_obs_prob(6,1,True)
    trans_mat = get_transition_prob(1,True)
    likelihood_regular = forward_algorithm(obs_sequence,obs_prob,trans_mat,priors,1)
    print('Likelihood of the Regular die: ',likelihood_regular)
    print('Casino with Loaded die:')
    priors = get_prior_prob()
    obs_prob = get_obs_prob()
    trans_mat = get_transition_prob()
    likelihood_loaded = forward_algorithm(obs_sequence,obs_prob,trans_mat,priors,8)
    print('Likelihood of the Loaded die: ',likelihood_loaded)
    if(likelihood_regular > likelihood_loaded):
        print('Sequence is mostly generated by regular die')
    else:
        print('Sequence is mostly generated by loaded die')    
